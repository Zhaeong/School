module helicopter(CLOCK_50, SW, KEY,VGA_R, VGA_G, VGA_B,VGA_HS, VGA_VS, VGA_BLANK ,VGA_SYNC, VGA_CLK);
	input CLOCK_50;
	input [3:0] KEY;
	input [17:0] SW;
	output [9:0] VGA_R, VGA_G, VGA_B; //for vga module.
	output VGA_HS, VGA_VS, VGA_BLANK, VGA_SYNC, VGA_CLK; //for vga module.
	
	wire [7:0] X;
	wire [6:0] Y;
	
	reg [7:0] X_temp;
	reg [6:0] Y_temp;
	
	wire en;
	wire reset = SW[0];
	
	
	reg start;
	reg start2;
	wire [2:0]color;

	//slowed down clock
	reg c;
	reg c2;
	
	integer counter = 0;
	integer counter2 = 0;
	
	wire done;
	//heli clock
	always @(posedge CLOCK_50)
		begin
		counter = counter + 1 ;
		if (counter == 500000)
			begin
				c <= c+1'b1 ;
				counter = 0;
				start = 1'b1;
			end
		else if (counter == 499999)
			start = 1'b1;
		else
			start = 1'b0;
	end

	//obstacle clock
	/*always @(posedge CLOCK_50)
		begin
		counter2 = counter2 + 1 ;
		if (counter2 == 500011)
			begin
				c2 <= c2+1'b1 ;
				counter2 = 0;
				start2 = 1'b1;
			end
		else if (counter2 == 500010)
			start2 = 1'b1;
		else
			start2 = 1'b0;
		end
		*/
	
	//heli fsm
	/*always @(posedge c, negedge KEY[2])
		begin
		if (!KEY[2]) 
			begin // reset state
			X_temp = 8'b00001111;
			Y_temp = 7'b0111110;
			end
		else if (KEY[3]) // down
			begin
			if(Y_temp+ 1'b1 != 7'b1110000)
				Y_temp = Y_temp + 1'b1;
			end
		else if (!KEY[3]) // up
			begin
			if(Y_temp - 1'b1 != 7'b0000010)
				Y_temp = Y_temp - 1'b1;
			end
			
		end */
		
	
	//obstacle fsm
	always @(posedge c, negedge KEY[2])
		begin
		if (!KEY[2]) 
			begin // reset state
			X_temp = 8'b10011011;
			Y_temp = 7'b0111110;
			end
		else if (KEY[3]) // left
			begin
			//if(X_temp - 1'b1 != 8'b00000000)
				X_temp = X_temp - 1'b1;
			end
		else if (!KEY[3]) // right
			begin
			//if(X_temp + 1'b1 != 8'b10011111)
				X_temp = X_temp + 1'b1;
			end
			
		end
		
	
	
	//display_heli d0 (CLOCK_50, X_temp, Y_temp, X, Y, color, done, en, start);
	
	display_obs d0 (CLOCK_50, X_temp, Y_temp, X, Y, color, done, en, start);
	
	
		vga_adapter VGA(
				.resetn(reset),
				.clock(CLOCK_50),
				.colour(color),
				.x(X),
				.y(Y),
				.plot(en),
				/* Signals for the DAC to drive the monitor. */
				.VGA_R(VGA_R),
				.VGA_G(VGA_G),
				.VGA_B(VGA_B),
				.VGA_HS(VGA_HS),
				.VGA_VS(VGA_VS),
				.VGA_BLANK(VGA_BLANK),
				.VGA_SYNC(VGA_SYNC),
				.VGA_CLK(VGA_CLK));
				defparam VGA.RESOLUTION = "160x120";
				defparam VGA.MONOCHROME = "FALSE";
				defparam VGA.BITS_PER_COLOUR_CHANNEL = 1;
				defparam VGA.BACKGROUND_IMAGE = "background.mif";
endmodule


